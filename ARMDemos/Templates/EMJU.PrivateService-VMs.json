{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "This is the region where the resources will be created"
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "This is your Virtual Network's resource Group"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "First_ARM_VNet",
      "metadata": {
        "description": "This is your Virtual Network"
      }
    },
    "newStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Storage Account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "dnsNameForPrivateIP": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Private IP used to access the Virtual Machine."
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "14.04.2-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.2-LTS",
        "15.04"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values: 12.04.5-LTS, 14.04.2-LTS, 15.04."
      }
    },
    "NSGName": {
      "type": "string",
      "defaultValue": "App_NSG",
      "metadata": {
        "description": "This is name of the networkSecurityGroup that will be assigned to Application Subnet"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "This is the size of your ssh VM"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of VMs to create"
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your ssh VM"
      }
    },
    "osDiskNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your ssh VM"
      }
    },
    "nicNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your ssh NIC"
      }
    },
    "PrivateIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your VM set private address"
      }
    },
    "availabilitySetName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your availability set"
      }
    },
    "loadBalancerName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of your application gateway "
      }
    },
    "loadBalancerSubnet": {
      "type": "string",
      "metadata": {
        "description": "This is the front end port of your aoplication gateway"
      }
    },
    "loadBalancerFrontEndPort": {
      "type": "int",
      "metadata": {
        "description": "This is the front end port of your aoplication gateway"
      }
    },
    "loadBalancerBackEndAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "This is the back end IP address prefix of your application gateway"
      }
    },
    "loadBalancerBaseIP": {
      "type": "int",
      "metadata": {
        "description": "This is the back end port of your application gateway"
      }
    },
    "loadBalancerBackEndPort": {
      "type": "int",
      "metadata": {
        "description": "This is the back end port of your application gateway"
      }
    },
    "loadBalancerSkuName": {
      "type": "string",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "Sku Name"
      }
    },
    "postInstallScriptUrl": {
      "type": "string",
      "metadata": {
        "description": "Post install scripts directory"
      }
    },
    "postInstallScript": {
      "type": "string",
      "defaultValue": "PlayServerInstall.sh",
      "metadata": {
        "description": "Post install script"
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
    "serviceSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('NSGName'))]",
    "appGatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('loadBalancerSubnet'))]",
    "loadBalancerID": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]"
  },
  "resources": [

    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[parameters('availabilitySetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[parameters('loadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "subnet": {
                "id": "[variables('serviceSubnetRef')]"
              },
              "dnsSettings": {
                "domainNameLabel": "[parameters('dnsNameForPrivateIP')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "lbrule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": "[parameters('loadBalancerFrontEndPort')]",
              "backendPort": "[parameters('loadBalancerBackEndPort')]",
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[parameters('loadBalancerBackEndPort')]",
              "intervalInSeconds": 30,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'),'-',copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('serviceSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('loadBalancerID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'),'-', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'),'-',copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'),'-', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "false"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('vmNamePrefix'),'-osDisk','-',copyindex())]",
            "vhd": {
              "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',parameters('osDiskNamePrefix'),'_',parameters('vmNamePrefix'),'_',copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('nicNamePrefix'),'-',copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmNamePrefix'),'-', copyindex() , '/postInstallTask')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNamePrefix'),'-', copyindex())]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'),'-', copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[concat(parameters('postInstallScriptUrl'), parameters('postInstallScript'))]"
          ],
          "commandToExecute": "[concat('bash ', parameters('postInstallScript'))]",
          "timestamp": "(Get-Date).Ticks"
        }
      }
    }
  ]
}